jobs:
  - # Sync job identification
    id: osync
    # Job specific args
    args: {}
    # Host list
    hosts:
      - # Host identification, e.g. hostname
        id: j-nb-x1y
        # Host specific args
        args: {}
        # Variant list
        variants:
          - # Variant identification
            id: ssd-to-local
            # Variant specific arguments
            args:
              sync:
                # Initiator is the system osync runs on. The initiator directory must be a local path.
                src: /media/j/ws/.osync
                # Target is the system osync synchronizes to (can be the same system as the initiator in case of local sync tasks). The target directory can be a local or remote path.
                dst: /data/ws/.osync

          - id: ssd-to-onedrive
            args:
              sync:
                src: /media/j/ws/.osync
                dst: /somedir
      - id: j-nb-m1p
        args: {}
        variants:
          - id: ssd-to-local
            args:
              sync:
                src: /Volumes/ws/.osync
                dst: /data/ws/.osync
# Main args that are the base for being overriden
args:
  # Configuration options for filters
  filters:
    first: "include"  # Rsync exclude / include order (the option set here will be set first, eg: include will make include then exclude patterns)

    exclude:
      # Files that contains lists of files / directories to exclude from sync on both sides.
      # Leave this empty if you don't want to use an inclusion file.
      # Paths are relative to config file dir.
      from:
        - ../defaults/exclude-gitignore.txt
        - ../defaults/exclude-other.txt
      # List of files / directories to exclude from sync on both sides (see rsync patterns, wildcards work).
      # Paths are relative to sync dirs.
      pattern: []
    include:
      # Files that contains lists of files / directories to include from sync on both sides.
      # Leave this empty if you don't want to use an inclusion file.
      # Paths are relative to config file dir.
      from: []
      # List of files / directories to include from sync on both sides (see rsync patterns, wildcards work).
      # Paths are relative to sync dirs.
      pattern: []

  ssh:
    # ssh compression should be used on WAN links, unless your remote connection is good enough (LAN), in which case it would slow down things
    compression: false
    # If the target system is remote, you can specify an RSA key (please use full path). If not defined, the default ~/.ssh/id_rsa will be used. See documentation for further information.
    private_rsa_key: /home/backupuser/.ssh/id_rsa
    # Alternatively, you may specify an SSH password file (less secure). Needs sshpass utility installed.
    password_file: ""
    # When using ssh filter, you must specify a remote token matching the one setup in authorized_keys
    remote_token: SomeAlphaNumericToken9

    # Optional ssh options. Example to lower CPU usage on ssh compression, one can specify '-T -c arcfour -o Compression=no -x'
    # -T = turn off pseudo-tty, -c arcfour = weakest but fasted ssh encryption (destination must accept "Ciphers arcfour" in sshd_config), -x turns off X11 forwarding
    # arcfour isn't accepted on most newer systems, you may then prefer any AES encryption if processor has aes-ni hardware acceleration
    # If the system does not provide hardware assisted acceleration, chacha20-poly1305@openssh.com is a good cipher to select
    # See: https://wiki.csnu.org/index.php/SSH_ciphers_speed_comparison
    # -o Compression=no is already handled by SSH_COMPRESSION option
    # Uncomment the following line to use those optimizations, on secured links only
    args: "-T -c aes128-ctr -x"
    # args: "-T -c chacha20-poly1305@openssh.com -x"
    # Ignore ssh known hosts. DANGER WILL ROBINSON DANGER ! This can lead to security issues. Only enable this if you know what you're doing.
    ignore_known_hosts: false
    # Use a single TCP connection for all SSH calls. Will make remote sync faster, but may work less good on lossy links.
    controlmaster: false
    # Check for connectivity to remote host before launching remote sync task. Be sure the hosts responds to ping. Failing to ping will stop sync.
    remote_host_ping: false
    # Check for internet access by pinging one or more 3rd party hosts before remote sync task. Leave empty if you don't want this check to be be performed. Failing to ping will stop sync.
    # If you use this function, you should set more than one 3rd party host, and be sure you can ping them.
    # Be aware some DNS like opendns redirect false hostnames. Also, this adds an extra execution time of a bit less than a minute.
    remote_3rd_party_hosts:
      - "www.kernel.org"
      - "www.google.com"

  # Configuration options for rsync
  rsync:
    # # Let RSYNC compress file transfers. Do not use this if both initator and target replicas are on local system. Also, do not use this if you already enabled SSH compression.
    compress: true
    # If enabled, synchronization on remote system will be processed as superuser. See documentation for /etc/sudoers file configuration.
    sudo: false
    # Executable paths
    exec:
      # Local rsync executable path. Paranoia option. Don't change this unless you read the documentation.
      local: rsync
      # Remote rsync executable path. Leave this empty in most cases
      remote: ""
    # Optional arguments passed to rsync executable. The following are already managed by the program and shoul never be passed here
    # -r -l -p -t -g -o -D -E - u- i- n --executability -A -X -L -K -H -8 -zz –skip-compress –checksum –bwlimit –partial –partial-dir –no-whole-file –whole-file –backup –backup-dir –suffix
    # --exclude --exclude-from --include --include-from --list-only --stats
    # When dealing with different filesystems for sync, or using SMB mountpoints, try adding --modify-window=2 --omit-dir-times as optional arguments.
    args: ""

  # Configuration options for limits
  limits:
    # Bandwidth limit Kbytes / second. Leave 0 to disable limitation
    bandwidth: 0
    # Limits on time for syncing or waiting
    time:
      # Maximum execution time (in seconds) for sync process. Set these values zero will disable max execution times.
      exec:
        # Soft exec time only generates a warning.
        soft_max: 7200
        # Hard exec time will generate a warning and stop sync process.
        hard_max: 10600
      daemon:
        # Minimum time (in seconds) in file monitor /daemon mode between modification detection and sync task in order to let copy operations finish.
        min_wait: 0
        # Maximum time (in seconds) waiting in file monitor / daemon mode. After this time, sync is run.
        # Use 0 to wait indefinitely.
        max_wait: 7200
      # Max execution time of commands before they get force killed. Leave 0 if you don't want this to happen. Time is specified in seconds.
      hooks:
        max_exec_time_per_cmd_before: 0
        max_exec_time_per_cmd_after: 0

  # Configuration for logs
  logs:
    # Log file location. Leaving this empty will create a logfile at /var/log/osync_version_SYNC_ID.log (or current directory if /var/log doesn't exist)
    file: ""
    # Log a list of conflictual files (EXPERIMENTAL)
    conflicts: false
    # Log a message every x seconds just to know the task is still alive
    heartbeat: 1801

  # Configuration options of the sync behaviour
  sync:
    # Optional sync type. By default, osync is bidirectional. You may want to use osync as unidirectional sync in some circumstances.
    # Valid values are "" (empty), "initiator2target" or "target2initiator"
    type: ""
    # Do a full checksum on all files that have identical sizes, they are checksummed to see if they actually are identical. This can take a long time.
    checksum: false
    # By default, osync stores its state into the replica_path/.osync_workdir/state
    # This behavior can be changed for initiator or slave by overriding the following with an absolute path to a statedir, ex /opt/osync_state/initiator
    # If osync runs locally, initiator and target state dirs **must** be different
    state_dir:
      src: ""
      dst: ""
    # Options to preserve file attributes, etc
    preserve:
      # Preserve basic linux permissions
      permissions: true
      owner: true
      group: true
      # On MACOS X, does not work and will be ignored
      exec: true
      # Preserve ACLS. Make sure source and target FS can handle ACL. Disabled on Mac OSX.
      acl: true
      # Preserve Xattr. Make sure source and target FS can manage identical XATTRS. Disabled on Mac OSX. Apparently, prior to rsync v3.1.2 there are some performance caveats with transferring XATTRS.
      xattr: false
    # Options on how to treat links
    links:
      # Transforms symlinks into referent files/dirs. Be careful as symlinks without referrent will break sync as if standard files could not be copied.
      sym: false
      # Treat symlinked dirs	as dirs. CAUTION: This also follows symlinks outside of the replica root.
      dir: false
      # Preserve hard links. Make sure source and target FS can manage hard links or you will lose them.
      hard: false



  # Configuration for backup options
  backup:
    # Enabling this option will keep a backup of a file on the target replica if it gets updated from the source replica. Backups will be made to .osync_workdir/backups
    enabled: true
    # Keep multiple backup versions of the same file. Warning, This can be very space consuming.
    multiple: false
    # Osync will clean backup files after a given number of days. Setting this to 0 will disable cleaning and keep backups forever. Warning: This can be very space consuming.
    days: 3
    # If the same file exists on both replicas, newer version will be synced. However, if both files have the same timestamp but differ, this sets winner replica.
    # Valid values are "" (empty), "initiator" or "target"
    prevalence: "initiator"

  # Configuration for soft-delete options
  delete:
    enabled: true
    days: 30
    # Optional deletion skip on replicas.
    # Valid values are "" (empty), "initiator", "target", or "initiator,target"
    skip: ""

  # Configuration options for alerts
  alerts:
    # Generate an alert if initiator or target replicas have less free space than given value in KB. Set this to zero to skip disk space tests.
    minimum_space: 10240
    # Send an email when conflictual files are found (implies logs.conflicts)
    conflicts: false
    # Configuration options for mail alerting
    # Most Unix systems (including Win10 bash) have mail support out of the box
    # Just make sure that the current user has enough privileges to use mail / mutt / sendmail and that the mail system is configured to allow outgoing mails
    # on pfSense platform, smtp support needs to be configured in System > Advanced > Notifications
    # Android & Busybox use sendmail (and openssl if encryption is needed)
    # MSYS & Cygwin Windows mail support relies on mailsend.exe from muquit, http://github.com/muquit/mailsend which needs to be in %PATH% environment variable
    mail:
      # By default, only sync warnings / errors are sent by mail. This default behavior can be overriden here
      always_send: false
      # List of destination alert mails separated by spaces
      dst:
        - your@alert.tld
      # Source address that sends alert mails, must be accepted by smtp server
      src: alert@your.system.tld
      # Configuration of the server to use for sending mails
      smtp:
        server: "smtp.your.isp.tld"
        port: 25
        # encryption can be tls, ssl or none
        encryption: "none"
        user: ""
        password: ""
      # Optional change of mail body encoding (using iconv)
      # By default, all mails are sent in UTF-8 format without header (because of maximum compatibility of all platforms)
      # You may specify an optional encoding here (like "ISO-8859-1" or whatever iconv can handle)
      body_charset: ""

  # Commands can will be run before and / or after sync process.
  # Command lists will be joined to a single command seperated by ' && '.
  # Make sure the shell supports this.
  hooks:
    # Commands to run locally
    local:
      before: []
      after: []
    # Commands to run on remote syncs
    remote:
      before: []
      after: []
    # Stops osync execution if one of the above before commands fail
    run_osync_on_before_error: true
    # Run local and remote after sync commands even on failure
    run_after_on_osync_or_before_error: false

  # Configuration options for resuming aborted sync tasks.
  resume:
    # Try to resume an aborted sync task
    enabled: true
    # Number maximum resume tries before initiating a fresh sync.
    tries: 2
    # When a pidlock exists on slave replica that does not correspond to the initiator's instance-id, force pidlock removal. Be careful with this option if you have multiple initiators.
    force_stranger_lock_remove: false
    # Keep partial uploads that can be resumed on next run, experimental feature
    partial: false
    # Use delta copy algorithm (useful when local paths are network drives), defaults to true
    delta_copies: true
